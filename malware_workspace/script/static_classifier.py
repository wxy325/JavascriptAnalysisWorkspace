import numpy as np
from sklearn.neural_network import MLPClassifier
import os


def load_data():
    training_rate = 0.7
    script_dir = os.path.dirname(os.path.realpath(__file__))
    Feature_Folder_Base = os.path.join(script_dir, '../out_feature/')

    benign_csvs = [
        'benign_static_features.csv'
        # , 'obfuscated_benign_static_features.csv'
    ]
    malware_csvs = [
        'malicious_static_features.csv'
        ,'obfuscated_malicious_static_features.csv'
    ]

    train_feature_matrix_array = []
    train_result_matrix_array = []
    test_feature_matrix_array = []
    test_result_matrix_array = []


    for csv in benign_csvs:
        full_path = os.path.join(Feature_Folder_Base, csv)
        data_matrix = np.loadtxt(open(full_path, "rb"), delimiter=",", skiprows=0)
        matrix_height = data_matrix.shape[0]
        train_row = int(matrix_height * training_rate)
        result_matrix = np.zeros([matrix_height, 1])

        train_feature_matrix_array.append(data_matrix[:train_row,:])
        train_result_matrix_array.append(result_matrix[:train_row,:])

        test_feature_matrix_array.append(data_matrix[train_row:,:])
        test_result_matrix_array.append(result_matrix[train_row:,:])


    for csv in malware_csvs:
        full_path = os.path.join(Feature_Folder_Base, csv)
        data_matrix = np.loadtxt(open(full_path, "rb"), delimiter=",", skiprows=0)
        matrix_height = data_matrix.shape[0]
        train_row = int(matrix_height * training_rate)
        result_matrix = np.ones([matrix_height, 1])

        train_feature_matrix_array.append(data_matrix[:train_row,:])
        train_result_matrix_array.append(result_matrix[:train_row,:])

        test_feature_matrix_array.append(data_matrix[train_row:,:])
        test_result_matrix_array.append(result_matrix[train_row:,:])

    train_data = np.concatenate(train_feature_matrix_array)
    train_result = np.concatenate(train_result_matrix_array)

    test_data = np.concatenate(test_feature_matrix_array)
    test_result = np.concatenate(test_result_matrix_array)

    return (train_data, train_result, test_data, test_result)


if __name__ == '__main__':
    train_data, train_target, test_data, test_target = load_data()


    clf = MLPClassifier(hidden_layer_sizes=(100, 20), activation= 'relu', alpha= 0.0005, learning_rate_init= 0.0005, solver='adam', )
    clf.fit(train_data, train_target)


    predict_result = clf.predict(test_data)

    testresult = predict_result == test_target.T
    correct_count = np.count_nonzero(testresult)

    print(correct_count)
    print(testresult.shape)

    print('eee')

    pass
