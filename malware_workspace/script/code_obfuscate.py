from __future__ import unicode_literals
import os
import re
import requests
import json
from bs4 import BeautifulSoup
import codecs
import sys
from io import open
import config
reload(sys)
sys.setdefaultencoding('utf8')


# @param scripts Array[String] Array of contents of javascripts inside a single webpage
# @return Array[String]  Array of obfuscated javascript codes

def obfuscate(code_str):

    r = requests.post('https://service.javascriptobfuscator.com/HttpApi.ashx', json={
        'APIKey' : config.JS_Obfuscator_API_KEY,
        'APIPwd' : config.JS_Obfuscator_API_PWD,
        'Name' : 'Sample1',
        'ReplaceNames' : True,
        "EncodeStrings": True,
        "MoveStrings": True,
        'Items' : [
            {
                'FileName' : 'test0.js',
                'FileCode' : code_str
            }
        ]
    }, headers={
        'content-type': 'text/json'
    })
    if r.status_code != 200:
        return ""
    try:
        a = json.loads(r.text)
        return a['Items'][0]['FileCode']
    except Exception as e:
        return ""

def code_obfuscate(scripts):
    retArray = []
    for s in scripts:
        obfuscate_result = obfuscate(s)
        if len(obfuscate_result) == 0:
            obfuscate_result = s
        # obfuscate_result = "aaa"
        retArray.append(obfuscate_result);
    return retArray


def obfuscate_malicious_code():
    script_dir = os.path.dirname(os.path.realpath(__file__))
    renamed_malware_base = os.path.join(script_dir, '../data/js-malicious-dataset-renamed')
    output_dir_base = os.path.join(script_dir, '../data/obfuscated-malicious-output')
    if not os.path.exists(output_dir_base):
        os.mkdir(output_dir_base)

    dir_list = os.listdir(renamed_malware_base)
    for dir_base in dir_list:
        full_dir_base = os.path.join(renamed_malware_base, dir_base)
        full_output_dir_base = os.path.join(output_dir_base, dir_base)
        if not os.path.exists(full_output_dir_base):
            os.mkdir(full_output_dir_base)

        for root, dirs, files in os.walk(full_dir_base):
            for f in files:
                file_full_path = os.path.join(root, f)
                output_file_full_path = os.path.join(full_output_dir_base, f)


                fSuccess = True
                with codecs.open(file_full_path, 'r', encoding='utf-8') as fh:
                    try:
                        fh.readlines()
                        fh.seek(0)
                    except UnicodeDecodeError:
                        fSuccess = False
                if not fSuccess:
                    continue

                content = None
                with open(file_full_path) as input_file:
                    content = input_file.read()

                soup = BeautifulSoup(content, 'html.parser')
                scripts = soup.find_all('script')
                match_results = []
                match_results_full = []
                for s in scripts:
                    match_results.append(s.get_text())
                    match_results_full.append(str(s))

                obfuscate_results = code_obfuscate(match_results)
                obfuscated_content = content

                for i in range(len(match_results)):
                    f = match_results_full[i]
                    if len(match_results[i]) != 0:
                        obf_f = f.replace(match_results[i], obfuscate_results[i])
                        obfuscated_content = obfuscated_content.replace(f, obf_f)

                with open(output_file_full_path, 'w') as output_file:
                    output_file.write(obfuscated_content)

def obfuscate_benign_code():
    script_dir = os.path.dirname(os.path.realpath(__file__))
    renamed_malware_base = os.path.join(script_dir, '../data/benign_dataset')
    output_dir_base = os.path.join(script_dir, '../data/obfuscated-benign-output')
    if not os.path.exists(output_dir_base):
        os.mkdir(output_dir_base)

    full_dir_base = renamed_malware_base
    full_output_dir_base = output_dir_base

    for root, dirs, files in os.walk(full_dir_base):
        for f in files:
            file_full_path = os.path.join(root, f)
            output_file_full_path = os.path.join(full_output_dir_base, f)

            fSuccess = True
            with codecs.open(file_full_path, 'r', encoding='utf-8') as fh:
                try:
                    fh.readlines()
                    fh.seek(0)
                except UnicodeDecodeError:
                    fSuccess = False

                    # os.rm(file_full_path)
            if not fSuccess:
                continue


            # '''
            content = None
            with open(file_full_path) as input_file:
                content = input_file.read()

            soup = BeautifulSoup(content, 'html.parser')
            scripts = soup.find_all('script')
            match_results = []
            match_results_full = []
            for s in scripts:
                match_results.append(s.get_text())
                match_results_full.append(str(s))

            try:
                obfuscate_results = code_obfuscate(match_results)
            except Exception:
                continue
            obfuscated_content = content

            for i in range(len(match_results)):
                f = match_results_full[i]
                if len(match_results[i]) != 0:
                    obf_f = f.replace(match_results[i], obfuscate_results[i])
                    obfuscated_content = obfuscated_content.replace(f, obf_f)

            with open(output_file_full_path, 'w') as output_file:
                output_file.write(obfuscated_content)
            # '''

if __name__ == '__main__':
    # obfuscate_malicious_code()
    obfuscate_benign_code()
